{
    "components": {
        "queue": {
            "type": "ext",
            "displayname": "CK SQS Queue",
            "description": "Deploys an AWS SQS Queue. SQS queues are simple queues.",
            "cloud": "AWS",
            "ck_plugin_tier": 2,
            "resources": ["AWS::sqs::queue"],
            "policy": {
                "Version": "2012-10-17",
                "Statement": [{
                    "Sid": "Vis",
                    "Effect": "Allow",
                    "Action": [
                        "sqs:AddPermission",
                        "sqs:ChangeMessageVisibility",
                        "sqs:CreateQueue",
                        "sqs:DeleteMessage",
                        "sqs:DeleteQueue",
                        "sqs:GetQueueAttributes",
                        "sqs:GetQueueUrl",
                        "sqs:ListDeadLetterSourceQueues",
                        "sqs:ListQueues",
                        "sqs:ListQueueTags",
                        "sqs:RemovePermission",
                        "sqs:SetQueueAttributes",
                        "sqs:TagQueue",
                        "sqs:UntagQueue"
                    ],
                    "Resource": "*"
                }]
            },
            "input": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the target group"
                    },
                    "arn": {
                        "type": "string",
                        "description": "The ARN of the target group."
                    },
                    "vpc_id": {
                        "type": "string",
                        "description": "The VPC ID of the target group."
                    },
                    "port": {
                        "type": "integer",
                        "description": "The port on which the targets are listening.",
                        "default": 443
                    },
                    "load_balancer_arns": {
                        "type": "array",
                        "description": "The Amazon Resource Name (ARN) of the load balancer that routes traffic to this target group. You can use each target group with only one load balancer.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "protocol": {
                        "type": "string",
                        "description": "The protocol to use for routing traffic to the targets.",
                        "enum": ["HTTP","HTTPS","TCP","TLS","UDP","TCP_UDP","GENEVE"],
                        "default": "HTTPS"
                    },
                    "protocol_version": {
                        "type": "string",
                        "description": "[HTTP/HTTPS protocol] The protocol version of the target group.",
                        "enum": ["GRPC", "HTTP2", "HTTP1"],
                        "default": "HTTP1"
                    },
                    "target_type": {
                        "type": "string",
                        "description": "The type of the targets that are registered with this target group (e.g. ip, lambda, alb, or instance)",
                        "enum": ["instance", "ip", "lambda", "alb"]
                    },
                    "ip_address_type": {
                        "type": "string",
                        "description": "The type of IP address used for this target group.",
                        "enum": ["ipv4", "ipv6"]
                    },
                    "health_check_protocol": {
                        "type": "string",
                        "description": "The protocol the load balancer uses when performing health checks on targets.",
                        "enum": ["TCP", "HTTP", "HTTPS"],
                        "default": "HTTPS"
                    },
                    "health_check_port": {
                        "type": "string",
                        "description": "The port the load balancer uses when performing health checks on targets.",
                        "default": "traffic-port"
                    },
                    "health_check_enabled": {
                        "type": "boolean",
                        "description": "Indicates whether health checks are enabled.",
                        "default": true
                    },
                    "health_check_path": {
                        "type": "string",
                        "description": "The destination for health checks on the targets.",
                        "default": "/"
                    },
                    "health_check_interval_seconds": {
                        "type": "integer",
                        "description": "The approximate amount of time, in seconds, between health checks of an individual target.",
                        "minimum": 5,
                        "maximum": 300,
                        "default": 30
                    },
                    "health_check_timeout_seconds": {
                        "type": "integer",
                        "description": "The amount of time, in seconds, during which no response from a target means a failed health check.",
                        "minimum": 2,
                        "maximum": 120,
                        "default": 10
                    },
                    "healthy_threshold_count": {
                        "type": "integer",
                        "description": "The number of consecutive health check successes required before considering a target healthy.",
                        "minimum": 2,
                        "maximum": 10,
                        "default": 5
                    },
                    "unhealthy_threshold_count": {
                        "type": "integer",
                        "description": "The number of consecutive health check failures required before considering a target unhealthy.",
                        "minimum": 2,
                        "maximum": 10,
                        "default": 2
                    },
                    "matcher": {
                        "type": "object",
                        "description": "The HTTP or gRPC codes to use when checking for a successful response from a target.",
                        "properties": {
                            "HttpCode": {
                                "type": "string",
                                "default": {"HttpCode": "200,403"}
                            }
                        }
                        "default": {"HttpCode": "200,403"}
                    },




        unhealthy_threshold_count = cdef.get('unhealthy_threshold_count') or 2
        matcher = cdef.get('matcher') or {"HttpCode": '200,403'}

                    "tags": {
                        "type": "object",
                        "description": "The tags to attach to this queue",
                        "common": true
                    }




        protocol = cdef.get("protocol") or 'HTTPS'
        protocol_version = cdef.get('protocol_version') or "HTTP1"
        port = cdef.get('port') or 443
        health_check_protocol = cdef.get('health_check_protocol') or 'HTTPS'
        health_check_port = cdef.get('health_check_port') or 'traffic-port'
        health_check_enabled = cdef.get('health_check_enabled') or True
        health_check_path = cdef.get('health_check_path') or '/'
        health_check_interval_seconds = cdef.get('health_check_interval_seconds') or 30
        health_check_timeout_seconds = cdef.get('health_check_timeout_seconds') or 5
        healthy_threshold_count = cdef.get('healthy_threshold_count') or 5
        unhealthy_threshold_count = cdef.get('unhealthy_threshold_count') or 2
        matcher = cdef.get('matcher') or {"HttpCode": '200,403'}
        target_type = cdef.get('target_type') or 'ip'
        tags = cdef.get('tags') or {} # this is converted to a [{"Key": key, "Value": value} , ...] format
        ip_address_type = cdef.get('tags') or 'ipv4'

                    "name": {
                        "type": "string",
                        "description": "The name of the queue. If not passed, a name is autogenerated"
                    },
                    "fifo": {
                        "type": "boolean",
                        "description": "Whether the queue is FIFO or not.",
                        "default": false,
                        "common": true
                    },
                    "delay_seconds": {
                        "type": "integer",
                        "description": "The number of seconds to delay all messages before they become visible to consumers.",
                        "default": 0,
                        "maximum": 900
                    },
                    "retention_seconds": {
                        "type": "string",
                        "description": "The number of seconds for which Amazon SQS retains a message in the queue.",
                        "default": 345600,
                        "minimum": 60,
                        "maximum": 1209600
                    },
                    "dead_letter_queue_arn": {
                        "type": "string",
                        "description": "The ARN of the dead letter queue to associate with this SQS queue."
                    },
                    "max_count_before_dead_letter": {
                        "type": "integer",
                        "description": "The number of times a message is delivered to the queue before being sent to the dead letter queue."
                    },
                    "visibility_timeout": {
                        "type": "integer",
                        "description": "The number of seconds after a message is received by a consumer before it is made visible to other consumers. If using SQS with Lambda, set this to 10% more than the timeout of the invoked Lambda for best results.",
                        "default": 30,
                        "minimum": 0,
                        "maximum": 43200,
                        "common": true
                    },
                    "policy": {
                        "type": "object",
                        "description": "An IAM policy to attach to this queue that determines access to it."
                    },
                    "kms_key_id": {
                        "type": "string",
                        "description": "The ID of an Amazon Web Services managed customer master key (CMK) for Amazon SQS or a custom CMK."
                    },
                    "kms_key_reuse_seconds": {
                        "type": "integer",
                        "description": "The length of time that Amazon SQS reuses a data key before calling KMS again.",
                        "default": 300
                    },
                    "sqs_managed_sse": {
                        "type": "boolean",
                        "description": "Whether to use Amazon SQS managed server-side encryption.",
                        "default": true
                    },
                    "content_based_deduplication": {
                        "type": "boolean",
                        "description": "Whether to enable content-based deduplication.",
                        "default": false
                    },
                    "deduplication_scope": {
                        "type": "string",
                        "description": "Specifies whether message deduplication occurs at the message group or queue level",
                        "enum": ["queue", "messageGroup"]
                    },
                    "fifo_throughput_limit": {
                        "type": "string",
                        "description": "Specifies whether the FIFO queue throughput limit applies to the queue or to each message group",
                        "enum": ["perQueue", "perMessageGroupId"]
                    },
                    "tags": {
                        "type": "object",
                        "description": "The tags to attach to this queue",
                        "common": true
                    }
                }
            },
            "props": {
                "name": {
                    "type": "string",
                    "description": "The name of the target group."
                },
                "arn": {
                    "type": "string",
                    "description": "The ARN of the target group."
                },
                "vpc_id": {
                    "type": "string",
                    "description": "The VPC ID of the target group."
                },
                "port": {
                    "type": "integer",
                    "description": "The port on which the targets are listening."
                },
                "load_balancer_arns": {
                    "type": "array",
                    "description": "The Amazon Resource Name (ARN) of the load balancer that routes traffic to this target group. You can use each target group with only one load balancer.",
                    "items": {
                        "type": "string"
                    }
                },
                "protocol": {
                    "type": "string",
                    "description": "The protocol to use for routing traffic to the targets."
                },
                "protocol_version": {
                    "type": "string",
                    "description": "[HTTP/HTTPS protocol] The protocol version of the target group."
                },
                "target_type": {
                    "type": "string",
                    "description": "The type of the targets that are registered with this target group (e.g. ip, lambda, alb, or instance)"
                },
                "ip_address_type": {
                    "type": "string",
                    "description": "The type of IP address used for this target group."
                }
            },
            "examples": [
                {
                    "displayname": "FIFO Queue with Tags",
                    "notes": "Pass fifo: true to create a FIFO queue. Pass tags to attach tags to the queue.",
                    "definition": {
                        "type": "&sqs.queue",
                        "fifo": true,
                        "visibility_timeout": 220,
                        "tags": {
                            "foo": "bar"
                        }
                    }
                },
                {
                    "displayname": "Queue with Dead Letter Queue",
                    "notes": "Pass dead_letter_queue_arn and max_count_before_dead_letter to create a queue with a dead letter queue.",
                    "definition": {
                        "type": "&sqs.queue",
                        "dead_letter_queue_arn": "&dl_q:props.arn",
                        "max_count_before_dead_letter": 5
                    }
                }
            ]
        }
    }
}